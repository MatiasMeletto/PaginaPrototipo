@inject IAuthorizationService AuthorizationService
@inject UserManager<Usuario> UserManager
@page "/pizzas"

<h3>Pizza</h3>
<select @bind="Model.Id">
    <option selected></option>
    <option value="11">Muzzarela</option>
    <option value="12">Especial</option>
    <option value="13">Con jamon</option>
    <option value="14">Napolitana</option>
    <option value="15">4 quesos</option>
    <option value="16">Cebolla</option>
    <option value="17">Anchoa</option>
    <option value="18">Anana</option>
    <option value="19">Huevo</option>
    <option value="20">Choclo</option>
    <option value="21">Milan</option>
</select>
<input @bind="Model.Cantidad" type="number" min="0" max="5" />
<br>

<button class="btn btn-primary" @onclick="CargarProductoCarrito">Agregar al carrito</button>
<button class="btn btn-primary" @onclick="VerCarrito">Ver carrito</button>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private class ProductoViewModel
    {
        public int Id{ get; set; }
        public int Cantidad{ get; set; }
    }

    private ProductoViewModel Model { get; set; } = new();

    private async void CargarProductoCarrito()
    {
        var user = (await AuthenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            using var db = new CompraContext();
            var usuario = await UserManager.FindByNameAsync(user.Identity.Name);            

            Carrito carrito = db.Carritos.Include(c => c.Productos).Where(c => c.UsuarioId == usuario.Id).SingleOrDefault();

            if (carrito is not null)
            {
                CarritoProducto carritoProducto = new CarritoProducto()
                    {
                        ProductoId = Model.Id,
                        Cantidad = Model.Cantidad,
                        CarritoId = carrito.CarritoId,
                        Carrito = carrito
                    };

                carrito.Productos.Add(carritoProducto);
                db.SaveChanges();
            }
            else
            {
                //anashe
            }
        }
    }

    private async void VerCarrito()
    {
        var user = (await AuthenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            using var db = new CompraContext();
            var usuario = await UserManager.FindByNameAsync(user.Identity.Name);
            Carrito carrito = db.Carritos
               .Include(c => c.Usuario)
               .Include(c => c.Productos)
               .ThenInclude(p => p.Producto)
               .ThenInclude(p => p.Adicionales)
               .Include(c => c.Productos).ThenInclude(p => p.Adicionales)
               .Where(c => c.UsuarioId == usuario.Id).SingleOrDefault();
        }       
    }
}
